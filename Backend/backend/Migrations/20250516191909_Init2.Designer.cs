// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Database;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250516191909_Init2")]
    partial class Init2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Database.Entites.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Dni")
                        .HasColumnType("text");

                    b.Property<string[]>("Email")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("WorkShopId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("WorkShopId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "5029c209-c333-4243-9861-a96b094c61cc",
                            Email = new[] { "lucaspirez42@gmail.com" },
                            FirstName = "Juan ",
                            LastName = "Perez",
                            PhoneNumber = new[] { "3424388239" },
                            WorkShopId = "c3114d5e-01ce-49a8-a4d7-eea0be64536a"
                        },
                        new
                        {
                            Id = "8b0fbf2a-35c0-4a32-86f6-2d937443f7c8",
                            Email = new string[0],
                            FirstName = "Maria ",
                            LastName = "Lopez",
                            PhoneNumber = new string[0],
                            WorkShopId = "c3114d5e-01ce-49a8-a4d7-eea0be64536a"
                        });
                });

            modelBuilder.Entity("backend.Database.Entites.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Method")
                        .HasColumnType("text");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("backend.Database.Entites.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("backend.Database.Entites.VehicleEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("FinalAmount")
                        .HasColumnType("double precision");

                    b.Property<bool>("NotifycationSent")
                        .HasColumnType("boolean");

                    b.Property<double>("Presupuest")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ReceptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleId")
                        .HasColumnType("text");

                    b.Property<string>("WorkShopId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("WorkShopId");

                    b.ToTable("VehicleEntries");
                });

            modelBuilder.Entity("backend.Database.Entites.WorkShop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkShops");

                    b.HasData(
                        new
                        {
                            Id = "c3114d5e-01ce-49a8-a4d7-eea0be64536a",
                            Name = "Taller Jesuita"
                        },
                        new
                        {
                            Id = "9e84eec6-9680-4082-85a4-afa1e3e7445b",
                            Name = "Taller Silvana"
                        });
                });

            modelBuilder.Entity("backend.Database.Entites.Customer", b =>
                {
                    b.HasOne("backend.Database.Entites.WorkShop", "WorkShop")
                        .WithMany("Customers")
                        .HasForeignKey("WorkShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkShop");
                });

            modelBuilder.Entity("backend.Database.Entites.Payment", b =>
                {
                    b.HasOne("backend.Database.Entites.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("backend.Database.Entites.Vehicle", b =>
                {
                    b.HasOne("backend.Database.Entites.Customer", "Customer")
                        .WithMany("Vehicle")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("backend.Database.Entites.VehicleEntry", b =>
                {
                    b.HasOne("backend.Database.Entites.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Database.Entites.Vehicle", "Vehicle")
                        .WithMany("VehicleEntries")
                        .HasForeignKey("VehicleId");

                    b.HasOne("backend.Database.Entites.WorkShop", "WorkShop")
                        .WithMany("VehicleEntries")
                        .HasForeignKey("WorkShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");

                    b.Navigation("WorkShop");
                });

            modelBuilder.Entity("backend.Database.Entites.Customer", b =>
                {
                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("backend.Database.Entites.Vehicle", b =>
                {
                    b.Navigation("VehicleEntries");
                });

            modelBuilder.Entity("backend.Database.Entites.WorkShop", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("VehicleEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
